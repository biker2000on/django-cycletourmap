x-app:
  &default-app
  build:
    context: "."
    target: "app"
    args:
      - "DEBUG=${DEBUG:-false}"
      - "NODE_ENV=${NODE_ENV:-production}"
      - "DJANGO_ENV=${DJANGO_ENV:-production}"
      - "SECRET_KEY=${SECRET_KEY:-notverysecret}"
  depends_on:
    - "postgres"
    - "redis"
  env_file:
    - ".env.prod"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - "${DOCKER_WEB_VOLUME:-./public_collected:/app/public_collected}"
    # - ./src:/app/src

    # x-logging:
    #   &logging
    #   logging:
    #     driver: loki
    #     options:
    #       loki-url: "http://localhost:8080/loki/api/v1/push"

services:
  nginx:
    build: ./nginx
    volumes:
      - ./public_collected:/public_collected
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    ports:
      - 1337:80
    depends_on:
      - web

  db:
    image: postgis/postgis:14-master
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    ports:
      - 5432:5432/tcp
    env_file:
      - ".env.prod"
    volumes:
      - db:/var/lib/postgresql/data
    stop_grace_period: "3s"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"

  # redis:
  #   <<: *logging
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "${DOCKER_REDIS_CPUS:-0}"
  #         memory: "${DOCKER_REDIS_MEMORY:-0}"
  #   env_file:
  #     - ".env.prod"
  #   image: "redis:7.0.4-bullseye"
  #   restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  #   stop_grace_period: "3s"
  #   volumes:
  #     - "redis:/data"

  web:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    # healthcheck:
    #   test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}"
    #   interval: "60s"
    #   timeout: "3s"
    #   start_period: "5s"
    #   retries: 3
    expose:
      - 8000
  # worker:
  #   <<: *default-app
  #   <<: *logging
  #   command: python manage.py run_huey
  #   entrypoint: []
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "${DOCKER_WORKER_CPUS:-0}"
  #         memory: "${DOCKER_WORKER_MEMORY:-0}"

volumes:
  db: {}
  # redis: {}

